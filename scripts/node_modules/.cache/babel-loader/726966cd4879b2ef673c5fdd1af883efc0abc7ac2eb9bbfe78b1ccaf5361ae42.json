{"ast":null,"code":"const API_URL = 'http://localhost:8080';\nexport const getCubeState = async () => {\n  const response = await fetch(`${API_URL}/api/cube`);\n  if (!response.ok) {\n    throw new Error(`Failed to fetch cube state: ${response.statusText}`);\n  }\n  return response.json();\n};\nexport const rotateFace = async (face, clockwise) => {\n  const response = await fetch(`${API_URL}/api/cube/rotate`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      face,\n      clockwise\n    })\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to rotate face: ${response.statusText}`);\n  }\n  return response.json();\n};\nexport const resetCube = async () => {\n  const response = await fetch(`${API_URL}/api/cube/reset`, {\n    method: 'POST'\n  });\n  if (!response.ok) {\n    throw new Error(`Failed to reset cube: ${response.statusText}`);\n  }\n  return response.json();\n};","map":{"version":3,"names":["API_URL","getCubeState","response","fetch","ok","Error","statusText","json","rotateFace","face","clockwise","method","headers","body","JSON","stringify","resetCube"],"sources":["C:/New folder/rubiks-cube-simulator/scripts/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:8080';\r\n\r\nexport const getCubeState = async () => {\r\n    const response = await fetch(`${API_URL}/api/cube`);\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to fetch cube state: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const rotateFace = async (face, clockwise) => {\r\n    const response = await fetch(`${API_URL}/api/cube/rotate`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ face, clockwise }),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to rotate face: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const resetCube = async () => {\r\n    const response = await fetch(`${API_URL}/api/cube/reset`, {\r\n        method: 'POST',\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to reset cube: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,uBAAuB;AAEvC,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,WAAW,CAAC;EACnD,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,+BAA+BH,QAAQ,CAACI,UAAU,EAAE,CAAC;EACzE;EACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAAEC,SAAS,KAAK;EACjD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,kBAAkB,EAAE;IACvDW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,IAAI;MAAEC;IAAU,CAAC;EAC5C,CAAC,CAAC;EACF,IAAI,CAACR,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,0BAA0BH,QAAQ,CAACI,UAAU,EAAE,CAAC;EACpE;EACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC1B,CAAC;AAED,OAAO,MAAMS,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,OAAO,iBAAiB,EAAE;IACtDW,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,IAAI,CAACT,QAAQ,CAACE,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,yBAAyBH,QAAQ,CAACI,UAAU,EAAE,CAAC;EACnE;EACA,OAAOJ,QAAQ,CAACK,IAAI,CAAC,CAAC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}