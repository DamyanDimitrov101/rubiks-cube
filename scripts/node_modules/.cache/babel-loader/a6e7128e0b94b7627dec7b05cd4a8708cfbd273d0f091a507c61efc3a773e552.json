{"ast":null,"code":"const API_URL='http://localhost:8080';export const getCubeState=async()=>{const response=await fetch(`${API_URL}/api/cube`);if(!response.ok){throw new Error(`Failed to fetch cube state: ${response.statusText}`);}return response.json();};export const rotateFace=async(face,clockwise)=>{const response=await fetch(`${API_URL}/api/cube/rotate`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({face,clockwise})});if(!response.ok){throw new Error(`Failed to rotate face: ${response.statusText}`);}return response.json();};export const performMove=async notation=>{const response=await fetch(`${API_URL}/api/cube/move`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({notation})});if(!response.ok){throw new Error(`Failed to perform move: ${response.statusText}`);}return response.json();};export const resetCube=async()=>{const response=await fetch(`${API_URL}/api/cube/reset`,{method:'POST'});if(!response.ok){throw new Error(`Failed to reset cube: ${response.statusText}`);}return response.json();};export const scrambleCube=async function(){let moves=arguments.length>0&&arguments[0]!==undefined?arguments[0]:20;const response=await fetch(`${API_URL}/api/cube/scramble`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({moves})});if(!response.ok){throw new Error(`Failed to scramble cube: ${response.statusText}`);}return response.json();};export const executeAlgorithm=async algorithm=>{const response=await fetch(`${API_URL}/api/cube/algorithm`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({algorithm})});if(!response.ok){throw new Error(`Failed to execute algorithm: ${response.statusText}`);}return response.json();};/*\r\nexport const checkIfSolved = async () => {\r\n    const response = await fetch(`${API_URL}/api/cube/solved`);\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to check if cube is solved: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};*/","map":{"version":3,"names":["API_URL","getCubeState","response","fetch","ok","Error","statusText","json","rotateFace","face","clockwise","method","headers","body","JSON","stringify","performMove","notation","resetCube","scrambleCube","moves","arguments","length","undefined","executeAlgorithm","algorithm"],"sources":["C:/New folder/rubiks-cube-simulator/scripts/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:8080';\r\n\r\nexport const getCubeState = async () => {\r\n    const response = await fetch(`${API_URL}/api/cube`);\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to fetch cube state: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const rotateFace = async (face, clockwise) => {\r\n    const response = await fetch(`${API_URL}/api/cube/rotate`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ face, clockwise }),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to rotate face: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const performMove = async (notation) => {\r\n    const response = await fetch(`${API_URL}/api/cube/move`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ notation }),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to perform move: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const resetCube = async () => {\r\n    const response = await fetch(`${API_URL}/api/cube/reset`, {\r\n        method: 'POST',\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to reset cube: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const scrambleCube = async (moves = 20) => {\r\n    const response = await fetch(`${API_URL}/api/cube/scramble`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ moves }),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to scramble cube: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const executeAlgorithm = async (algorithm) => {\r\n    const response = await fetch(`${API_URL}/api/cube/algorithm`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ algorithm }),\r\n    });\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to execute algorithm: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};\r\n\r\n/*\r\nexport const checkIfSolved = async () => {\r\n    const response = await fetch(`${API_URL}/api/cube/solved`);\r\n    if (!response.ok) {\r\n        throw new Error(`Failed to check if cube is solved: ${response.statusText}`);\r\n    }\r\n    return response.json();\r\n};*/\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}