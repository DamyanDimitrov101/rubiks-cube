{"ast":null,"code":"\n\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport './RubiksCube.css';\r\nimport { getCubeState, rotateFace, resetCube } from '../services/api';\r\n\r\nconst RubiksCube = () => {\r\n    const [cubeState, setCubeState] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchCubeState();\r\n    }, []);\r\n\r\n    const fetchCubeState = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const data = await getCubeState();\r\n            setCubeState(data);\r\n            setError(null);\r\n        } catch (err) {\r\n            console.error('Error fetching cube state:', err);\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRotate = async (face, clockwise) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await rotateFace(face, clockwise);\r\n            setCubeState(response.cube);\r\n        } catch (error) {\r\n            console.error('Error rotating face:', error);\r\n            setError(`Failed to rotate face: ${error.message}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleReset = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await resetCube();\r\n            setCubeState(response.cube);\r\n        } catch (error) {\r\n            console.error('Error resetting cube:', error);\r\n            setError(`Failed to reset cube: ${error.message}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Render a single face of the cube\r\n    const renderFace = (face, label, position) => {\r\n        if (!cubeState || !cubeState[face]) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={`face-container ${position}`}>\r\n                <div className=\"face-label\">{label}</div>\r\n                <div className=\"face\">\r\n                    {[0, 1, 2].map(row => (\r\n                        [0, 1, 2].map(col => (\r\n                            <div\r\n                                key={`${row}-${col}`}\r\n                                className={`square ${cubeState[face][row][col]}`}\r\n                            />\r\n                        ))\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // Render buttons for rotating a face\r\n    const renderFaceButtons = (face, label) => (\r\n        <div className=\"face-controls\">\r\n            <span className=\"face-label\">{label}</span>\r\n            <button\r\n                onClick={() => handleRotate(face, true)}\r\n                disabled={loading}\r\n                className=\"rotate-btn\"\r\n            >\r\n                {label} ↻\r\n            </button>\r\n            <button\r\n                onClick={() => handleRotate(face, false)}\r\n                disabled={loading}\r\n                className=\"rotate-btn\"\r\n            >\r\n                {label} ↺\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"rubiks-cube-container\">\r\n            <h1>Rubik's Cube Simulator</h1>\r\n\r\n            {error && (\r\n                <div className=\"error-message\">\r\n                    <p>{error}</p>\r\n                </div>\r\n            )}\r\n\r\n            {loading && <div className=\"loading-indicator\">Loading...</div>}\r\n\r\n            {cubeState && (\r\n                <div className=\"cube-net\">\r\n                    {renderFace('up', 'U', 'up')}\r\n                    {renderFace('left', 'L', 'left')}\r\n                    {renderFace('front', 'F', 'front')}\r\n                    {renderFace('right', 'R', 'right')}\r\n                    {renderFace('back', 'B', 'back')}\r\n                    {renderFace('down', 'D', 'down')}\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"controls-container\">\r\n                <div className=\"control-section\">\r\n                    <h3>Rotate Faces</h3>\r\n                    <div className=\"face-buttons row\">\r\n                        {renderFaceButtons('front', 'F')}\r\n                        {renderFaceButtons('right', 'R')}\r\n                        {renderFaceButtons('up', 'U')}\r\n                        {renderFaceButtons('back', 'B')}\r\n                        {renderFaceButtons('left', 'L')}\r\n                        {renderFaceButtons('down', 'D')}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"control-section\">\r\n                    <h3>Cube Operations</h3>\r\n                    <div className=\"operation-buttons\">\r\n                        <button\r\n                            onClick={handleReset}\r\n                            disabled={loading}\r\n                            className=\"operation-btn reset-btn\"\r\n                        >\r\n                            Reset Cube\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RubiksCube;*/","map":{"version":3,"names":[],"sources":["C:/New folder/rubiks-cube-simulator/scripts/src/components/RubiksCube.jsx"],"sourcesContent":["\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nimport React, { useState, useEffect } from 'react';\r\nimport './RubiksCube.css';\r\nimport { getCubeState, rotateFace, resetCube } from '../services/api';\r\n\r\nconst RubiksCube = () => {\r\n    const [cubeState, setCubeState] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        fetchCubeState();\r\n    }, []);\r\n\r\n    const fetchCubeState = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const data = await getCubeState();\r\n            setCubeState(data);\r\n            setError(null);\r\n        } catch (err) {\r\n            console.error('Error fetching cube state:', err);\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleRotate = async (face, clockwise) => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await rotateFace(face, clockwise);\r\n            setCubeState(response.cube);\r\n        } catch (error) {\r\n            console.error('Error rotating face:', error);\r\n            setError(`Failed to rotate face: ${error.message}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleReset = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const response = await resetCube();\r\n            setCubeState(response.cube);\r\n        } catch (error) {\r\n            console.error('Error resetting cube:', error);\r\n            setError(`Failed to reset cube: ${error.message}`);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Render a single face of the cube\r\n    const renderFace = (face, label, position) => {\r\n        if (!cubeState || !cubeState[face]) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className={`face-container ${position}`}>\r\n                <div className=\"face-label\">{label}</div>\r\n                <div className=\"face\">\r\n                    {[0, 1, 2].map(row => (\r\n                        [0, 1, 2].map(col => (\r\n                            <div\r\n                                key={`${row}-${col}`}\r\n                                className={`square ${cubeState[face][row][col]}`}\r\n                            />\r\n                        ))\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    // Render buttons for rotating a face\r\n    const renderFaceButtons = (face, label) => (\r\n        <div className=\"face-controls\">\r\n            <span className=\"face-label\">{label}</span>\r\n            <button\r\n                onClick={() => handleRotate(face, true)}\r\n                disabled={loading}\r\n                className=\"rotate-btn\"\r\n            >\r\n                {label} ↻\r\n            </button>\r\n            <button\r\n                onClick={() => handleRotate(face, false)}\r\n                disabled={loading}\r\n                className=\"rotate-btn\"\r\n            >\r\n                {label} ↺\r\n            </button>\r\n        </div>\r\n    );\r\n\r\n    return (\r\n        <div className=\"rubiks-cube-container\">\r\n            <h1>Rubik's Cube Simulator</h1>\r\n\r\n            {error && (\r\n                <div className=\"error-message\">\r\n                    <p>{error}</p>\r\n                </div>\r\n            )}\r\n\r\n            {loading && <div className=\"loading-indicator\">Loading...</div>}\r\n\r\n            {cubeState && (\r\n                <div className=\"cube-net\">\r\n                    {renderFace('up', 'U', 'up')}\r\n                    {renderFace('left', 'L', 'left')}\r\n                    {renderFace('front', 'F', 'front')}\r\n                    {renderFace('right', 'R', 'right')}\r\n                    {renderFace('back', 'B', 'back')}\r\n                    {renderFace('down', 'D', 'down')}\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"controls-container\">\r\n                <div className=\"control-section\">\r\n                    <h3>Rotate Faces</h3>\r\n                    <div className=\"face-buttons row\">\r\n                        {renderFaceButtons('front', 'F')}\r\n                        {renderFaceButtons('right', 'R')}\r\n                        {renderFaceButtons('up', 'U')}\r\n                        {renderFaceButtons('back', 'B')}\r\n                        {renderFaceButtons('left', 'L')}\r\n                        {renderFaceButtons('down', 'D')}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"control-section\">\r\n                    <h3>Cube Operations</h3>\r\n                    <div className=\"operation-buttons\">\r\n                        <button\r\n                            onClick={handleReset}\r\n                            disabled={loading}\r\n                            className=\"operation-btn reset-btn\"\r\n                        >\r\n                            Reset Cube\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RubiksCube;*/\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}